<!-- 1. Inline CSS in your section -->
<style>
  /* Custom font-face if using a custom font variant */
  {% if section.settings.font_variant == 'custom' %}
    {%- liquid
      assign body_font_bold = section.settings.title_font | font_modify: 'weight', 'bold'
      assign body_font_italic = section.settings.title_font | font_modify: 'style', 'italic'
      assign body_font_bold_italic = body_font_bold | font_modify: 'style', 'italic'
    %}
    {{ section.settings.title_font | font_face: font_display: 'swap' }}
    {{ body_font_bold | font_face: font_display: 'swap' }}
    {{ body_font_italic | font_face: font_display: 'swap' }}
    {{ body_font_bold_italic | font_face: font_display: 'swap' }}
    {{ settings.type_header_font | font_face: font_display: 'swap' }}
    #shopify-section-{{section.id}} * {
      font-family: {{ section.settings.title_font.family }};
    }
  {% endif %}

  /* Link text color */
  #shopify-section-{{ section.id }} .content-wrapper a p {
    color: {{ section.settings.text_color }};
  }

  /* Section display, padding, background, text-align */
  #shopify-section-{{ section.id }} {
    display:
      {% case section.settings.display_on %}
        {% when 'all' %}block
        {% when 'mobile_only' %}none
        {% when 'desktop_only' %}block
      {% endcase %};
    padding: {{ section.settings.padding_y_desk }}px {{ section.settings.padding_x_desk }}px;
    background-color: {{ section.settings.background_color }};
    text-align: {{ section.settings.heading_align }};
  }

  /* Inner max-width and text-align */
  #shopify-section-{{ section.id }} .content-wrapper {
    max-width:
      {% if section.settings.section_width == 'full' %}100%{% else %}{{ settings.page_width }}px{% endif %};
    text-align: {{ section.settings.heading_align }};
  }

  /* Title typography */
  #shopify-section-{{ section.id }} .title h1,
  #shopify-section-{{ section.id }} .title h2,
  #shopify-section-{{ section.id }} .title h3,
  #shopify-section-{{ section.id }} .title p {
    font-size:
      {% case section.settings.heading_size %}
        {% when 'small' %}36px
        {% when 'medium' %}45px
        {% when 'large' %}60px
      {% endcase %};
    text-transform: {{ section.settings.headline_typography }};
    color: {{ section.settings.title_color }};
    text-align:
      {% case section.settings.heading_align %}
        {% when 'left' %}left
        {% when 'center' %}center
        {% when 'right' %}right
      {% endcase %};
  }

  /* Subtitle color */
  #shopify-section-{{ section.id }} .subtitle h2,
  #shopify-section-{{ section.id }} .subtitle h3,
  #shopify-section-{{ section.id }} .subtitle p {
    color: {{ section.settings.subtitle_color }};
  }

  /* Carousel item dynamic styles */
  #shopify-section-{{ section.id }} .carousel .carousel-item {
    background-color: {{ section.settings.card_background }};
    border:
      {% if section.settings.container_styling == 'card' %}
        {{ section.settings.card_border }}px solid {{ section.settings.card_border_color }}
      {% else %}
        none
      {% endif %};
    border-radius: {{ section.settings.container_radius }}px;
    box-shadow:
      {% if section.settings.container_styling == 'shadow' %}
        {{ section.settings.box_shadow_offset }}px {{ section.settings.box_shadow_offset }}px {{ section.settings.box_shadow_blur }}px {{ section.settings.box_shadow_spread }}px {{ section.settings.box_shadow_color }}
      {% else %}
        none
      {% endif %};
    color: {{ section.settings.body_color }};
  }

  /* Mobile: dynamic display, padding */
  @media (max-width: 768px) {
    #shopify-section-{{ section.id }} {
      display:
        {% case section.settings.display_on %}
          {% when 'all' %}block
          {% when 'mobile_only' %}block
          {% when 'desktop_only' %}none
        {% endcase %};
      padding: {{ section.settings.padding_y_mob }}px {{ section.settings.padding_x_mob }}px;
    }
  }
</style>


<div class="content-wrapper">
  {%- if section.settings.title != blank or section.settings.sibtitle != blank -%}
      <div class="heading">
       
        <div class="title">
          {%- if section.settings.title != blank -%}
            {{ section.settings.title }}
          {%- endif -%}
        </div>
        <div class="subtitle">
          {%- if section.settings.subtitle != blank -%}
            {{ section.settings.subtitle }}
          {%- endif -%}
        </div>
        
      </div>
    {%- endif -%}
  <div class="slider-container">
 
    <div class="carousel-wrapper">
      <div class="carousel" data-section-id="{{ section.id }}">
        {% for block in section.blocks %}
          <div class="carousel-item">
        
            {% if block.type == 'testimonial_slide' %}
             <div class="top-slide-content">
               {% if block.settings.image != blank %}
              <img src="{{ block.settings.image | img_url: '80x80' }}" alt="{{ block.settings.name | default: 'Image' }}">
              {% endif %}
               <div>
                 <div class="name">{{ block.settings.name }}</div>
                <div class="status">{{ block.settings.status }}</div>
              <div class="rating">{% for i in (1..5) %}{% render 'star_comparison' %}{% endfor %}</div>
               </div>
           
              </div>
             {{ block.settings.text | truncate: 150 }}
            {% else %}
              <img class="imgslide" src="{{ block.settings.image | img_url: '400x' }}" alt="{{ block.settings.name | default: 'Image' }}">
            {% endif %}
          </div>
        {% endfor %}
        {% for block in section.blocks %}
         <div class="carousel-item">
          
            {% if block.type == 'testimonial_slide' %}
                <div class="top-slide-content">
               {% if block.settings.image != blank %}
              <img src="{{ block.settings.image | img_url: '80x80' }}" alt="{{ block.settings.name | default: 'Image' }}">
              {% endif %}
                  <div>
                <div class="name">{{ block.settings.name }}</div>
              <div class="status">{{ block.settings.status }}</div>
              <div class="rating">{% for i in (1..5) %}{% render 'star_comparison' %}{% endfor %}</div>
                  </div>
            
              </div>
              {{ block.settings.text | truncate: 150 }}
             
         {% else %}
                
                  <img class="imgslide" src="{{ block.settings.image | img_url: '400x' }}" alt="{{ block.settings.name | default: 'Image' }}">
                
         {% endif %}
         </div>
        {% endfor %}
      </div>
    </div>
    <div class="carousel-nav">
      <div class="arrow" data-direction="prev">←</div>
      {% for block in section.blocks %}
        <div class="dot" {% if forloop.first %}active{% endif %}" data-index="{{ forloop.index0 }}"></div>
      {% endfor %}
      <div class="arrow" data-direction="next">→</div>
    </div>
  </div>
</div>
<script>
  document.addEventListener('DOMContentLoaded', function() {
    const sectionId = '{{ section.id }}';
    const carousel = document.querySelector(`#shopify-section-${sectionId} .carousel`);
    const dots = document.querySelectorAll(`#shopify-section-${sectionId} .dot`);
    const arrows = document.querySelectorAll(`#shopify-section-${sectionId} .arrow`);
    const autoScrollEnabled = {{ section.settings.auto_scroll | json }}; // Ensure boolean value
    const scrollSpeed = {{ section.settings.scroll_speed | times: 1000 }}; // Convert seconds to ms
    let currentIndex = 0;
    let autoScrollInterval = null;
    const totalItems = carousel.children.length; // Number of original items
    const itemWidth = carousel.children[0].offsetWidth + 24; // Width + updated gap of 24px
    const visibleItems = Math.ceil(carousel.parentElement.offsetWidth / itemWidth); // Round up for full coverage

    // Clone items for infinite scrolling (2 sets of clones)
    const originalItems = Array.from(carousel.children);
    for (let i = 0; i < 2; i++) {
      originalItems.forEach(item => {
        const clone = item.cloneNode(true);
        carousel.appendChild(clone);
      });
    }
    const realTotalItems = carousel.children.length; // Total items after cloning

    // Set initial position in the middle
    currentIndex = totalItems;
    carousel.style.transition = 'none';
    carousel.style.transform = `translateX(${-currentIndex * itemWidth}px)`;
    setTimeout(() => {
      carousel.style.transition = 'transform 0.5s ease';
    }, 50);

    function updateCarousel(transition = true) {
      const offset = -currentIndex * itemWidth;
      
      if (transition) {
        carousel.style.transition = 'transform 0.5s ease';
      } else {
        carousel.style.transition = 'none';
      }
      
      carousel.style.transform = `translateX(${offset}px)`;

      // Infinite loop handling
      if (currentIndex >= totalItems * 2) {
        setTimeout(() => {
          currentIndex = totalItems;
          carousel.style.transition = 'none';
          carousel.style.transform = `translateX(${-currentIndex * itemWidth}px)`;
          setTimeout(() => {
            carousel.style.transition = 'transform 0.5s ease';
          }, 50);
        }, 500);
      } else if (currentIndex < totalItems) {
        setTimeout(() => {
          currentIndex = totalItems * 2 - visibleItems;
          carousel.style.transition = 'none';
          carousel.style.transform = `translateX(${-currentIndex * itemWidth}px)`;
          setTimeout(() => {
            carousel.style.transition = 'transform 0.5s ease';
          }, 50);
        }, 500);
      }

      // Update active dot
      let dotIndex = (currentIndex % totalItems);
      dots.forEach((dot, index) => {

        
        if(dotIndex >= {{section.blocks.size}}){
          dotIndex = dotIndex - {{section.blocks.size}} % totalItems;
        }
        
        dot.classList.toggle('active', index === dotIndex);
      });
    }

    function startAutoScroll() {
      console.log('Attempting to start auto-scroll');
      console.log('autoScrollEnabled:', autoScrollEnabled);
      console.log('scrollSpeed:', scrollSpeed);
      stopAutoScroll(); // Clear before starting
      if (autoScrollEnabled === true) { // Explicit comparison with true
        autoScrollInterval = setInterval(() => {
          currentIndex++;
          console.log('Auto-scroll tick, currentIndex:', currentIndex);
          updateCarousel(true);
        }, scrollSpeed / totalItems); // Divide scrollSpeed by totalItems for per-slide timing
        console.log('Auto-scroll started, interval ID:', autoScrollInterval);
      } else {
        console.log('Auto-scroll not started because autoScrollEnabled is not true');
      }
    }

    function stopAutoScroll() {
      if (autoScrollInterval) {
        clearInterval(autoScrollInterval);
        console.log('Auto-scroll stopped, previous interval ID:', autoScrollInterval);
        autoScrollInterval = null;
      }
    }

    // Arrow navigation
    arrows.forEach(arrow => {
      arrow.addEventListener('click', () => {
        stopAutoScroll();
        const direction = arrow.getAttribute('data-direction');
        if (direction === 'prev') {
          currentIndex--;
        } else if (direction === 'next') {
          currentIndex++;
        }
        updateCarousel(true);
        if (autoScrollEnabled) startAutoScroll();
      });
    });

    // Dot navigation
    dots.forEach(dot => {
      dot.addEventListener('click', () => {
        stopAutoScroll();
        const index = parseInt(dot.getAttribute('data-index'));
        currentIndex = totalItems + index;
        updateCarousel(true);
        if (autoScrollEnabled) startAutoScroll();
      });
    });

    // Pause on hover
    carousel.addEventListener('mouseenter', stopAutoScroll);
    carousel.addEventListener('mouseleave', () => {
      if (autoScrollEnabled) startAutoScroll();
    });

    // Add touch controls for mobile devices
    let touchStartX = 0;
    let touchCurrentX = 0;
    let isDragging = false;

    carousel.addEventListener('touchstart', (e) => {
      stopAutoScroll();
      touchStartX = e.touches[0].clientX;
      touchCurrentX = touchStartX;
      isDragging = true;
      carousel.style.transition = 'none'; // Disable animation during swipe
    });

    carousel.addEventListener('touchmove', (e) => {
      if (!isDragging) return;
      touchCurrentX = e.touches[0].clientX;
      const diff = touchCurrentX - touchStartX;
      const newOffset = -currentIndex * itemWidth + diff;
      carousel.style.transform = `translateX(${newOffset}px)`;
    });

    carousel.addEventListener('touchend', (e) => {
      if (!isDragging) return;
      isDragging = false;
      const diff = touchCurrentX - touchStartX;
      const threshold = itemWidth / 3; // Threshold for switching slides

      if (Math.abs(diff) > threshold) {
        if (diff > 0) {
          currentIndex--; // Swipe right
        } else {
          currentIndex++; // Swipe left
        }
      }

      carousel.style.transition = 'transform 0.5s ease';
      updateCarousel(true);
      if (autoScrollEnabled) startAutoScroll();
    });

    // Initialization
    console.log('Carousel initializing...');
    console.log('autoScrollEnabled at init:', autoScrollEnabled);
    updateCarousel(false);
    startAutoScroll(); // Attempt to start auto-scroll
  });
</script>

{% schema %}
{
  "name": "Image Slider",
  "tag": "section",
  "class": "section image_slider yas_gallery",
  "settings": [
    {
      "type": "header",
      "content": "General Settings"
    },
    { "type": "color", "id": "background_color", "label": "Background color", "default": "transparent" },
 { 
         "type": "select", 
       "id": "heading_size", 
       "label": "Heading Size", 
       "options": [{ "value": "small", "label": "Small" }, { "value": "medium", "label": "Medium" }, { "value": "large", "label": "Large" }], "default": "medium" 
     },
     {
       "type": "select", "id": "headline_typography", 
       "label": "Headline Typography", 
       "options": [
         { "value": "uppercase", "label": "AA" }, 
         { "value": "capitalize", "label": "Aa" }, 
         { "value": "lowercase", "label": "aa" }], "default": "capitalize" },
              { "type": "select", "id": "font_variant", "label": "Font Family", "options": [{ "value": "default", "label": "Default by theme" }, { "value": "custom", "label": "Own choice" }], "default": "default" },
    { "type": "font_picker", "label": "Regular Font", "id": "title_font", "default": "montserrat_n4" },
   
  { "type": "color", "id": "title_color", "label": "Title Color", "default": "#000" },
    { "type": "color", "id": "subtitle_color", "label": "Subtitle Color", "default": "#666" },
      { "type": "color", "id": "status_color", "label": "Verified Text Color", "default": "#000" },
          { "type": "color", "id": "body_color", "label": "Body Text Color", "default": "#000" },
    { "type": "select", "id": "heading_align", "label": "Heading Alignment", "options": [{ "value": "left", "label": "Left" }, { "value": "center", "label": "Center" }, { "value": "right", "label": "Right" }], "default": "center" },
    { "type": "select", "id": "section_width", "label": "Section Width", "options": [{ "value": "full", "label": "Full Width" }, { "value": "contained", "label": "Contained" }], "default": "contained" },
    { "type": "range", "id": "padding_x_desk", "label": "Horizontal Padding", "info": "for desktop", "min": 0, "max": 100, "step": 5, "default": 70 },
    { "type": "range", "id": "padding_y_desk", "label": "Vertical Padding", "info": "for desktop", "min": 0, "max": 100, "default": 10 },
    { "type": "range", "id": "padding_x_mob", "label": "Horizontal Padding", "info": "for mobile", "min": 0, "max": 100, "step": 5, "default": 15 },
    { "type": "range", "id": "padding_y_mob", "label": "Vertical Padding", "info": "for mobile", "min": 0, "max": 50, "default": 7 },
    { "type": "select", "id": "display_on", "label": "Display On", "options": [{ "value": "all", "label": "All Devices" }, { "value": "mobile_only", "label": "Mobile Only" }, { "value": "desktop_only", "label": "Desktop Only" }], "default": "all" },
    {
      "type": "header",
      "content": "Carousel Settings"
    },
    { "type": "range", "id": "scroll_speed", "label": "Scroll Speed (seconds)", "min": 5, "max": 30, "step": 1, "default": 15 },
    { "type": "checkbox", "id": "auto_scroll", "label": "Enable Auto Scroll", "default": true },
    {
      "type": "header",
      "content": "Content Settings"
    },
     {
      "type": "richtext",
      "id": "title",
      "label": "Title",
      "default": "<h2>Value Proposition featuring benifit</h2>"
    },

    {
      "type": "richtext",
      "id": "subtitle",
      "label": "Subtitle",
      "default": "<h3>Ut enim ad minima veniam, quis nostrum exercitati onem ullam corporis suscipit laboriosam, commodi </h3>"
    },
        {
      "type": "header",
      "content": "Product Cards Settings"
    },
    { "type": "select", "id": "container_styling", "label": "Container Styling", "options": [{ "value": "no_card", "label": "No Card" }, { "value": "card", "label": "Card" }, { "value": "shadow", "label": "Shadow" }], "default": "card" },
    {
      "type": "range",
      "id": "box_shadow_offset",
      "label": "Box shadow offset",  
      "min": -10,
      "max": 10,
      "default": 1
    },
    {
      "type": "range",
      "id": "box_shadow_blur",
      "label": "Box shadow blur",  
      "min": 0,
      "max": 15,
      "default": 1
    },
    {
      "type": "range",
      "id": "box_shadow_spread",
      "label": "Box shadow spread",  
      "min": 0,
      "max": 15,
      "default": 1
    },
    { "type": "color", "id": "box_shadow_color", "label": "Box shadow color", "default": "#000000" },
    { "type": "color", "id": "card_background", "label": "Card background", "default": "transparent" },

    {
      "type": "range",
      "id": "card_border",
      "label": "Card border",
      "info": "Container Styling Card",
      "min": 0,
      "max": 5,
      "step": 1,
      "default": 0
    },
    { "type": "color", "id": "card_border_color", "label": "Card border color", "default": "#000" },
    { "type": "range", "id": "container_radius", "label": "Container Corner Radius", "min": 0, "max": 50, "step": 5, "default": 10 },
   ],
  "blocks": [
    {
      "type": "photo_slide",
      "name": "Photo Slide",
      "settings": [
        { "type": "image_picker", "id": "image", "label": "Image" }
      ]
    },
    {
      "type": "testimonial_slide",
      "name": "Testimonial Slide",
      "settings": [
        { "type": "image_picker", "id": "image", "label": "Image" },
        { "type": "richtext", "id": "rating", "label": "Rating", "default": "<p>★★★★★</p>" },
        { "type": "text", "id": "name", "label": "Name", "default": "Leslie Alexander" },
        { "type": "text", "id": "status", "label": "Status", "default": "Verified Customer" },
        { "type": "richtext", "id": "text", "label": "Text", "default": "<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>" }
      ]
    }
  ],
  "presets": [
    {
      "name": "Image Slider",
      "category": "Image",
      "blocks": [
        { "type": "photo_slide" },
        { "type": "testimonial_slide" },
        { "type": "testimonial_slide" }
      ]
    }
  ]
}
{% endschema %}